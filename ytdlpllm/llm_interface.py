"""Interface for all LLM APIs, to enable more to be used."""

from abc import ABC, abstractmethod


class LLMInterface(ABC):
    """Interface for all LLM APIs to follow."""

    @abstractmethod
    def add_system_prompt(self, prompt: str):
        """Add a system prompt to the model's context.

        This method must be implemented by subclasses to ensure that
        system prompts can be dynamically added to the dialogue or command
        system being implemented.

        Args:
            prompt (str): The system prompt text to be added.
        """
        pass

    @abstractmethod
    def add_assistant_prompt(self, prompt: str):
        """Add an assistant's prompt to the model's context.

        This method must be implemented by subclasses to handle the inclusion
        of assistant-generated prompts that guide the interaction flow.

        Args:
            prompt (str): The assistant prompt text to be added.
        """
        pass

    @abstractmethod
    def add_user_prompt(self, prompt: str):
        """Add a user's prompt to the model's context.

        This method must be implemented by subclasses to incorporate user's
        input into the model's state or context.

        Args:
            prompt (str): The user prompt text to be added.
        """
        pass

    @abstractmethod
    def invoke_model(self) -> str:
        """Invoke the underlying language model to generate a response.

        This abstract method must be implemented by subclasses to perform
        the actual invocation of the language model and handle its output.
        It should handle any necessary preprocessing of context or handling
        of the model's output.

        Returns:
            str: The output generated by the language model.

        Raises:
            Exception: If the model fails to generate a response or encounters
                        an error during processing.
        """
        pass
